
attiny2313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000070  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004db  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000456  00000000  00000000  0000063f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f8  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c3  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005e  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	18 c0       	rjmp	.+48     	; 0x34 <__vector_1>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__vector_7>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	18 d0       	rcall	.+48     	; 0x60 <main>
  30:	1d c0       	rjmp	.+58     	; 0x6c <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <__vector_1>:
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>

ISR(INT0_vect){
  34:	1f 92       	push	r1
  36:	0f 92       	push	r0
  38:	0f b6       	in	r0, 0x3f	; 63
  3a:	0f 92       	push	r0
  3c:	11 24       	eor	r1, r1
	asm("nop");
  3e:	00 00       	nop
	};
  40:	0f 90       	pop	r0
  42:	0f be       	out	0x3f, r0	; 63
  44:	0f 90       	pop	r0
  46:	1f 90       	pop	r1
  48:	18 95       	reti

0000004a <__vector_7>:
	
ISR(USART_RX_vect){
  4a:	1f 92       	push	r1
  4c:	0f 92       	push	r0
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	0f 92       	push	r0
  52:	11 24       	eor	r1, r1
	asm("nop");
  54:	00 00       	nop
	};
  56:	0f 90       	pop	r0
  58:	0f be       	out	0x3f, r0	; 63
  5a:	0f 90       	pop	r0
  5c:	1f 90       	pop	r1
  5e:	18 95       	reti

00000060 <main>:

int main(void)
{
	char temp;
    /* Replace with your application code */
	DDRB = 0xFF;
  60:	8f ef       	ldi	r24, 0xFF	; 255
  62:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		temp = PORTB;
  64:	88 b3       	in	r24, 0x18	; 24
		temp = ~temp;
  66:	80 95       	com	r24
		PORTB = temp;
  68:	88 bb       	out	0x18, r24	; 24
  6a:	fc cf       	rjmp	.-8      	; 0x64 <main+0x4>

0000006c <_exit>:
  6c:	f8 94       	cli

0000006e <__stop_program>:
  6e:	ff cf       	rjmp	.-2      	; 0x6e <__stop_program>
